// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package main

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// __getContributionsInput is used internally by genqlient
type __getContributionsInput struct {
	Username string `json:"username"`
}

// GetUsername returns __getContributionsInput.Username, and is useful for accessing the field via an interface.
func (v *__getContributionsInput) GetUsername() string { return v.Username }

// getContributionsResponse is returned by getContributions on success.
type getContributionsResponse struct {
	// Lookup a user by login.
	User getContributionsUser `json:"user"`
}

// GetUser returns getContributionsResponse.User, and is useful for accessing the field via an interface.
func (v *getContributionsResponse) GetUser() getContributionsUser { return v.User }

// getContributionsUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type getContributionsUser struct {
	// The collection of contributions this user has made to different repositories.
	ContributionsCollection getContributionsUserContributionsCollection `json:"contributionsCollection"`
}

// GetContributionsCollection returns getContributionsUser.ContributionsCollection, and is useful for accessing the field via an interface.
func (v *getContributionsUser) GetContributionsCollection() getContributionsUserContributionsCollection {
	return v.ContributionsCollection
}

// getContributionsUserContributionsCollection includes the requested fields of the GraphQL type ContributionsCollection.
// The GraphQL type's documentation follows.
//
// A contributions collection aggregates contributions such as opened issues and commits created by a user.
type getContributionsUserContributionsCollection struct {
	// A calendar of this user's contributions on GitHub.
	ContributionCalendar getContributionsUserContributionsCollectionContributionCalendar `json:"contributionCalendar"`
}

// GetContributionCalendar returns getContributionsUserContributionsCollection.ContributionCalendar, and is useful for accessing the field via an interface.
func (v *getContributionsUserContributionsCollection) GetContributionCalendar() getContributionsUserContributionsCollectionContributionCalendar {
	return v.ContributionCalendar
}

// getContributionsUserContributionsCollectionContributionCalendar includes the requested fields of the GraphQL type ContributionCalendar.
// The GraphQL type's documentation follows.
//
// A calendar of contributions made on GitHub by a user.
type getContributionsUserContributionsCollectionContributionCalendar struct {
	// A list of the weeks of contributions in this calendar.
	Weeks []getContributionsUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeek `json:"weeks"`
}

// GetWeeks returns getContributionsUserContributionsCollectionContributionCalendar.Weeks, and is useful for accessing the field via an interface.
func (v *getContributionsUserContributionsCollectionContributionCalendar) GetWeeks() []getContributionsUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeek {
	return v.Weeks
}

// getContributionsUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeek includes the requested fields of the GraphQL type ContributionCalendarWeek.
// The GraphQL type's documentation follows.
//
// A week of contributions in a user's contribution graph.
type getContributionsUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeek struct {
	// The days of contributions in this week.
	ContributionDays []getContributionsUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeekContributionDaysContributionCalendarDay `json:"contributionDays"`
}

// GetContributionDays returns getContributionsUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeek.ContributionDays, and is useful for accessing the field via an interface.
func (v *getContributionsUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeek) GetContributionDays() []getContributionsUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeekContributionDaysContributionCalendarDay {
	return v.ContributionDays
}

// getContributionsUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeekContributionDaysContributionCalendarDay includes the requested fields of the GraphQL type ContributionCalendarDay.
// The GraphQL type's documentation follows.
//
// Represents a single day of contributions on GitHub by a user.
type getContributionsUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeekContributionDaysContributionCalendarDay struct {
	// How many contributions were made by the user on this day.
	ContributionCount int `json:"contributionCount"`
	// The day this square represents.
	Date string `json:"date"`
	// The hex color code that represents how many contributions were made on this day compared to others in the calendar.
	Color string `json:"color"`
}

// GetContributionCount returns getContributionsUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeekContributionDaysContributionCalendarDay.ContributionCount, and is useful for accessing the field via an interface.
func (v *getContributionsUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeekContributionDaysContributionCalendarDay) GetContributionCount() int {
	return v.ContributionCount
}

// GetDate returns getContributionsUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeekContributionDaysContributionCalendarDay.Date, and is useful for accessing the field via an interface.
func (v *getContributionsUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeekContributionDaysContributionCalendarDay) GetDate() string {
	return v.Date
}

// GetColor returns getContributionsUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeekContributionDaysContributionCalendarDay.Color, and is useful for accessing the field via an interface.
func (v *getContributionsUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeekContributionDaysContributionCalendarDay) GetColor() string {
	return v.Color
}

// The query or mutation executed by getContributions.
const getContributions_Operation = `
query getContributions ($username: String!) {
	user(login: $username) {
		contributionsCollection {
			contributionCalendar {
				weeks {
					contributionDays {
						contributionCount
						date
						color
					}
				}
			}
		}
	}
}
`

func getContributions(
	ctx_ context.Context,
	client_ graphql.Client,
	username string,
) (*getContributionsResponse, error) {
	req_ := &graphql.Request{
		OpName: "getContributions",
		Query:  getContributions_Operation,
		Variables: &__getContributionsInput{
			Username: username,
		},
	}
	var err_ error

	var data_ getContributionsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
